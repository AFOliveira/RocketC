Nonterminals useless in grammar

    function_declaration
    function_parameters
    base_declaration
    switch_case
    case_list
    case
    case_default
    struct_stmt
    enum_stmt
    union_stmt
    goto_stmt
    typeDef_stmt
    size_of_stmt
    special_type
    prefixes
    prefix


Terminals unused in grammar

    ERROR
    SWITCH
    CASE
    DEFAULT
    BREAK
    STRUCT
    TYPEDEF
    CONTINUE
    EXTERN
    GOTO
    LONG
    ENUM
    REGISTER
    SHORT
    SIZEOF
    STATIC
    SIGNED
    UNION
    UNSIGNED
    VOLATILE
    LEFT_BRACKET
    RIGHT_BRACKET
    TERNARY
    COMMA
    BITWISE_AND
    BITWISE_OR
    BITWISE_NOT
    BITWISE_XOR
    PLUS_ASSIGN
    MINUS_ASSIGN
    MODULO
    LEFT_SHIFT_ASSIGN
    RIGHT_SHIFT_ASSIGN
    BITWISE_AND_ASSIGN
    BITWISE_OR_ASSIGN
    BITWISE_XOR_ASSIGN
    MULTIPLY_ASSIGN
    DIVIDE_ASSIGN
    MODULUS_ASSIGN
    PREPROCESSOR
    ARROW
    DEFINE
    CONSTANT
    POINTER
    ADDRESS_OF
    OTHER
    AUTO
    DOT
    STRINGliteral


Rules useless in grammar

   74 function_declaration: base_declaration LPAREN function_parameters RPAREN compound_stmt
   75                     | base_declaration LPAREN function_parameters RPAREN

   76 function_parameters: ε
   77                    | function_parameters COLON base_declaration
   78                    | base_declaration
   79                    | VOID

   80 base_declaration: prefixes type ID

   81 switch_case: SWITCH LPAREN ID RPAREN LEFT_BRACE case_list RIGHT_BRACE
   82            | SWITCH LPAREN ID RPAREN LEFT_BRACE case_list case_default RIGHT_BRACE
   83            | SWITCH LPAREN expr RPAREN LEFT_BRACE case_list RIGHT_BRACE
   84            | SWITCH LPAREN expr RPAREN LEFT_BRACE case_list case_default RIGHT_BRACE

   85 case_list: case_list case
   86          | case

   87 case: CASE NUM COLON stmts BREAK

   88 case_default: DEFAULT NUM COLON stmts BREAK

   89 struct_stmt: STRUCT ID LEFT_BRACE stmts RIGHT_BRACE SEMI

   90 enum_stmt: ENUM ID LEFT_BRACE stmts RIGHT_BRACE SEMI

   91 union_stmt: UNION ID LEFT_BRACE stmts RIGHT_BRACE SEMI

   92 goto_stmt: GOTO ID SEMI

   93 typeDef_stmt: TYPEDEF enum_stmt ID SEMI
   94             | TYPEDEF struct_stmt ID SEMI

   95 size_of_stmt: SIZEOF LPAREN ID RPAREN
   96             | SIZEOF LPAREN type RPAREN
   97             | SIZEOF LPAREN special_type ID RPAREN

   98 special_type: STRUCT
   99             | TYPEDEF
  100             | ENUM
  101             | UNION

  102 prefixes: ε
  103         | prefixes prefix
  104         | prefix

  105 prefix: EXTERN
  106       | LONG
  107       | SHORT
  108       | STATIC
  109       | SIGNED
  110       | UNSIGNED
  111       | VOLATILE
  112       | REGISTER
  113       | CONSTANT


Rules useless in parser due to conflicts

   62 while_stmt: WHILE LPAREN expr RPAREN compound_stmt

   64 for_stmt: FOR LPAREN expr SEMI expr SEMI expr RPAREN compound_stmt


State 0 conflicts: 18 shift/reduce
State 15 conflicts: 18 shift/reduce
State 30 conflicts: 4 reduce/reduce
State 41 conflicts: 1 shift/reduce
State 51 conflicts: 8 shift/reduce
State 57 conflicts: 18 shift/reduce
State 91 conflicts: 18 shift/reduce
State 106 conflicts: 2 reduce/reduce
State 125 conflicts: 2 reduce/reduce


Grammar

    0 $accept: prog $end

    1 prog: stmts endfile

    2 stmts: ε
    3      | stmt SEMI stmts
    4      | stmts stmt SEMI

    5 stmt: if_stmt
    6     | while_stmt
    7     | do_stmt
    8     | for_stmt
    9     | return_stmt
   10     | declaration_stmt
   11     | compound_stmt
   12     | expr

   13 declaration_stmt: type ID
   14                 | type ID ASSIGN expr

   15 compound_stmt: LEFT_BRACE stmts RIGHT_BRACE

   16 function_inst: ID LPAREN function_inst_parameters RPAREN

   17 function_inst_parameters: function_inst_parameters COLON expr
   18                         | expr

   19 expr: arith_expr
   20     | cond_expr

   21 cond_expr: cond_expr cond_op factor
   22          | LOGICAL_NOT cond_expr
   23          | factor

   24 arith_expr: arith_expr op term
   25           | term

   26 term: term prio_op operand
   27     | operand

   28 operand: unary_op factor
   29        | factor unary_op
   30        | type_cast factor
   31        | factor

   32 factor: LPAREN arith_expr RPAREN
   33       | NUM
   34       | ID
   35       | FNUM
   36       | function_inst

   37 op: PLUS
   38   | MINUS
   39   | RIGHT_SHIFT
   40   | LEFT_SHIFT

   41 prio_op: TIMES
   42        | OVER
   43        | PERCENT

   44 unary_op: INCREMENT
   45         | DECREMENT

   46 cond_op: GREATER_THAN
   47        | LESS_THAN_OR_EQUAL
   48        | GREATER_THAN_OR_EQUAL
   49        | LESS_THAN
   50        | LOGICAL_AND
   51        | LOGICAL_OR
   52        | EQUAL
   53        | NOT_EQUAL

   54 if_stmt: IF LPAREN expr RPAREN compound_stmt
   55        | IF LPAREN expr RPAREN compound_stmt elseif_list
   56        | IF LPAREN expr RPAREN compound_stmt ELSE compound_stmt
   57        | IF LPAREN expr RPAREN compound_stmt elseif_list ELSE compound_stmt

   58 elseif_list: elseif_list ELSEIF LPAREN expr RPAREN compound_stmt
   59            | ELSEIF LPAREN expr RPAREN compound_stmt

   60 do_stmt: DO compound_stmt WHILE expr
   61        | DO stmt WHILE expr

   62 while_stmt: WHILE LPAREN expr RPAREN compound_stmt
   63           | WHILE LPAREN expr RPAREN stmt

   64 for_stmt: FOR LPAREN expr SEMI expr SEMI expr RPAREN compound_stmt
   65         | FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt

   66 return_stmt: RETURN expr

   67 endfile: ENDFILE

   68 type: INT
   69     | FLOAT
   70     | DOUBLE
   71     | CHAR
   72     | VOID

   73 type_cast: LPAREN type RPAREN


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ENDFILE (258) 67
    ERROR (259)
    IF (260) 54 55 56 57
    ELSEIF (261) 58 59
    ELSE (262) 56 57
    DO (263) 60 61
    WHILE (264) 60 61 62 63
    FOR (265) 64 65
    SWITCH (266)
    CASE (267)
    DEFAULT (268)
    RETURN (269) 66
    BREAK (270)
    INT (271) 68
    FLOAT (272) 69
    DOUBLE (273) 70
    CHAR (274) 71
    VOID (275) 72
    STRUCT (276)
    TYPEDEF (277)
    CONTINUE (278)
    EXTERN (279)
    GOTO (280)
    LONG (281)
    ENUM (282)
    REGISTER (283)
    SHORT (284)
    SIZEOF (285)
    STATIC (286)
    SIGNED (287)
    UNION (288)
    UNSIGNED (289)
    VOLATILE (290)
    NUM <intval> (291) 33
    ID <identifier> (292) 13 14 16 34
    FNUM <floatval> (293) 35
    ASSIGN (294) 14
    PLUS (295) 37
    MINUS (296) 38
    TIMES (297) 41
    OVER (298) 42
    PERCENT (299) 43
    LPAREN (300) 16 32 54 55 56 57 58 59 62 63 64 65 73
    RPAREN (301) 16 32 54 55 56 57 58 59 62 63 64 65 73
    LEFT_BRACE (302) 15
    RIGHT_BRACE (303) 15
    LEFT_BRACKET (304)
    RIGHT_BRACKET (305)
    TERNARY (306)
    SEMI (307) 3 4 64 65
    COLON (308) 17
    COMMA (309)
    INCREMENT (310) 44
    DECREMENT (311) 45
    BITWISE_AND (312)
    BITWISE_OR (313)
    BITWISE_NOT (314)
    BITWISE_XOR (315)
    LOGICAL_NOT (316) 22
    LOGICAL_AND (317) 50
    LOGICAL_OR (318) 51
    EQUAL (319) 52
    NOT_EQUAL (320) 53
    LESS_THAN (321) 49
    GREATER_THAN (322) 46
    LESS_THAN_OR_EQUAL (323) 47
    GREATER_THAN_OR_EQUAL (324) 48
    RIGHT_SHIFT (325) 39
    LEFT_SHIFT (326) 40
    PLUS_ASSIGN (327)
    MINUS_ASSIGN (328)
    MODULO (329)
    LEFT_SHIFT_ASSIGN (330)
    RIGHT_SHIFT_ASSIGN (331)
    BITWISE_AND_ASSIGN (332)
    BITWISE_OR_ASSIGN (333)
    BITWISE_XOR_ASSIGN (334)
    MULTIPLY_ASSIGN (335)
    DIVIDE_ASSIGN (336)
    MODULUS_ASSIGN (337)
    PREPROCESSOR (338)
    ARROW (339)
    DEFINE (340)
    CONSTANT (341)
    POINTER (342)
    ADDRESS_OF (343)
    OTHER (344)
    AUTO (345)
    DOT (346)
    STRINGliteral (347)


Nonterminals, with rules where they appear

    $accept (93)
        on left: 0
    prog (94)
        on left: 1
        on right: 0
    stmts (95)
        on left: 2 3 4
        on right: 1 3 4 15
    stmt (96)
        on left: 5 6 7 8 9 10 11 12
        on right: 3 4 61 63 65
    declaration_stmt (97)
        on left: 13 14
        on right: 10
    compound_stmt (98)
        on left: 15
        on right: 11 54 55 56 57 58 59 60 62 64
    function_inst (99)
        on left: 16
        on right: 36
    function_inst_parameters (100)
        on left: 17 18
        on right: 16 17
    expr (101)
        on left: 19 20
        on right: 12 14 17 18 54 55 56 57 58 59 60 61 62 63 64 65 66
    cond_expr (102)
        on left: 21 22 23
        on right: 20 21 22
    arith_expr (103)
        on left: 24 25
        on right: 19 24 32
    term (104)
        on left: 26 27
        on right: 24 25 26
    operand (105)
        on left: 28 29 30 31
        on right: 26 27
    factor (106)
        on left: 32 33 34 35 36
        on right: 21 23 28 29 30 31
    op (107)
        on left: 37 38 39 40
        on right: 24
    prio_op (108)
        on left: 41 42 43
        on right: 26
    unary_op (109)
        on left: 44 45
        on right: 28 29
    cond_op (110)
        on left: 46 47 48 49 50 51 52 53
        on right: 21
    if_stmt (111)
        on left: 54 55 56 57
        on right: 5
    elseif_list (112)
        on left: 58 59
        on right: 55 57 58
    do_stmt (113)
        on left: 60 61
        on right: 7
    while_stmt (114)
        on left: 62 63
        on right: 6
    for_stmt (115)
        on left: 64 65
        on right: 8
    return_stmt (116)
        on left: 66
        on right: 9
    endfile (117)
        on left: 67
        on right: 1
    type (118)
        on left: 68 69 70 71 72
        on right: 13 14 73
    type_cast (119)
        on left: 73
        on right: 30


State 0

    0 $accept: • prog $end

    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    IF           [reduce using rule 2 (stmts)]
    DO           [reduce using rule 2 (stmts)]
    WHILE        [reduce using rule 2 (stmts)]
    FOR          [reduce using rule 2 (stmts)]
    RETURN       [reduce using rule 2 (stmts)]
    INT          [reduce using rule 2 (stmts)]
    FLOAT        [reduce using rule 2 (stmts)]
    DOUBLE       [reduce using rule 2 (stmts)]
    CHAR         [reduce using rule 2 (stmts)]
    VOID         [reduce using rule 2 (stmts)]
    NUM          [reduce using rule 2 (stmts)]
    ID           [reduce using rule 2 (stmts)]
    FNUM         [reduce using rule 2 (stmts)]
    LPAREN       [reduce using rule 2 (stmts)]
    LEFT_BRACE   [reduce using rule 2 (stmts)]
    INCREMENT    [reduce using rule 2 (stmts)]
    DECREMENT    [reduce using rule 2 (stmts)]
    LOGICAL_NOT  [reduce using rule 2 (stmts)]
    $default     reduce using rule 2 (stmts)

    prog              go to state 19
    stmts             go to state 20
    stmt              go to state 21
    declaration_stmt  go to state 22
    compound_stmt     go to state 23
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    type              go to state 37
    type_cast         go to state 38


State 1

   54 if_stmt: IF • LPAREN expr RPAREN compound_stmt
   55        | IF • LPAREN expr RPAREN compound_stmt elseif_list
   56        | IF • LPAREN expr RPAREN compound_stmt ELSE compound_stmt
   57        | IF • LPAREN expr RPAREN compound_stmt elseif_list ELSE compound_stmt

    LPAREN  shift, and go to state 39


State 2

   60 do_stmt: DO • compound_stmt WHILE expr
   61        | DO • stmt WHILE expr

    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    stmt              go to state 40
    declaration_stmt  go to state 22
    compound_stmt     go to state 41
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    type              go to state 37
    type_cast         go to state 38


State 3

   62 while_stmt: WHILE • LPAREN expr RPAREN compound_stmt
   63           | WHILE • LPAREN expr RPAREN stmt

    LPAREN  shift, and go to state 42


State 4

   64 for_stmt: FOR • LPAREN expr SEMI expr SEMI expr RPAREN compound_stmt
   65         | FOR • LPAREN expr SEMI expr SEMI expr RPAREN stmt

    LPAREN  shift, and go to state 43


State 5

   66 return_stmt: RETURN • expr

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 44
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 6

   68 type: INT •

    $default  reduce using rule 68 (type)


State 7

   69 type: FLOAT •

    $default  reduce using rule 69 (type)


State 8

   70 type: DOUBLE •

    $default  reduce using rule 70 (type)


State 9

   71 type: CHAR •

    $default  reduce using rule 71 (type)


State 10

   72 type: VOID •

    $default  reduce using rule 72 (type)


State 11

   33 factor: NUM •

    $default  reduce using rule 33 (factor)


State 12

   16 function_inst: ID • LPAREN function_inst_parameters RPAREN
   34 factor: ID •

    LPAREN  shift, and go to state 45

    $default  reduce using rule 34 (factor)


State 13

   35 factor: FNUM •

    $default  reduce using rule 35 (factor)


State 14

   32 factor: LPAREN • arith_expr RPAREN
   73 type_cast: LPAREN • type RPAREN

    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    DOUBLE     shift, and go to state 8
    CHAR       shift, and go to state 9
    VOID       shift, and go to state 10
    NUM        shift, and go to state 11
    ID         shift, and go to state 12
    FNUM       shift, and go to state 13
    LPAREN     shift, and go to state 14
    INCREMENT  shift, and go to state 16
    DECREMENT  shift, and go to state 17

    function_inst  go to state 24
    arith_expr     go to state 46
    term           go to state 28
    operand        go to state 29
    factor         go to state 47
    unary_op       go to state 31
    type           go to state 48
    type_cast      go to state 38


State 15

   15 compound_stmt: LEFT_BRACE • stmts RIGHT_BRACE

    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    IF           [reduce using rule 2 (stmts)]
    DO           [reduce using rule 2 (stmts)]
    WHILE        [reduce using rule 2 (stmts)]
    FOR          [reduce using rule 2 (stmts)]
    RETURN       [reduce using rule 2 (stmts)]
    INT          [reduce using rule 2 (stmts)]
    FLOAT        [reduce using rule 2 (stmts)]
    DOUBLE       [reduce using rule 2 (stmts)]
    CHAR         [reduce using rule 2 (stmts)]
    VOID         [reduce using rule 2 (stmts)]
    NUM          [reduce using rule 2 (stmts)]
    ID           [reduce using rule 2 (stmts)]
    FNUM         [reduce using rule 2 (stmts)]
    LPAREN       [reduce using rule 2 (stmts)]
    LEFT_BRACE   [reduce using rule 2 (stmts)]
    INCREMENT    [reduce using rule 2 (stmts)]
    DECREMENT    [reduce using rule 2 (stmts)]
    LOGICAL_NOT  [reduce using rule 2 (stmts)]
    $default     reduce using rule 2 (stmts)

    stmts             go to state 49
    stmt              go to state 21
    declaration_stmt  go to state 22
    compound_stmt     go to state 23
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    type              go to state 37
    type_cast         go to state 38


State 16

   44 unary_op: INCREMENT •

    $default  reduce using rule 44 (unary_op)


State 17

   45 unary_op: DECREMENT •

    $default  reduce using rule 45 (unary_op)


State 18

   22 cond_expr: LOGICAL_NOT • cond_expr

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 50
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    cond_expr      go to state 51
    factor         go to state 52


State 19

    0 $accept: prog • $end

    $end  shift, and go to state 53


State 20

    1 prog: stmts • endfile
    4 stmts: stmts • stmt SEMI

    ENDFILE      shift, and go to state 54
    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    stmt              go to state 55
    declaration_stmt  go to state 22
    compound_stmt     go to state 23
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    endfile           go to state 56
    type              go to state 37
    type_cast         go to state 38


State 21

    3 stmts: stmt • SEMI stmts

    SEMI  shift, and go to state 57


State 22

   10 stmt: declaration_stmt •

    $default  reduce using rule 10 (stmt)


State 23

   11 stmt: compound_stmt •

    $default  reduce using rule 11 (stmt)


State 24

   36 factor: function_inst •

    $default  reduce using rule 36 (factor)


State 25

   12 stmt: expr •

    $default  reduce using rule 12 (stmt)


State 26

   20 expr: cond_expr •
   21 cond_expr: cond_expr • cond_op factor

    LOGICAL_AND            shift, and go to state 58
    LOGICAL_OR             shift, and go to state 59
    EQUAL                  shift, and go to state 60
    NOT_EQUAL              shift, and go to state 61
    LESS_THAN              shift, and go to state 62
    GREATER_THAN           shift, and go to state 63
    LESS_THAN_OR_EQUAL     shift, and go to state 64
    GREATER_THAN_OR_EQUAL  shift, and go to state 65

    $default  reduce using rule 20 (expr)

    cond_op  go to state 66


State 27

   19 expr: arith_expr •
   24 arith_expr: arith_expr • op term

    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    RIGHT_SHIFT  shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70

    $default  reduce using rule 19 (expr)

    op  go to state 71


State 28

   25 arith_expr: term •
   26 term: term • prio_op operand

    TIMES    shift, and go to state 72
    OVER     shift, and go to state 73
    PERCENT  shift, and go to state 74

    $default  reduce using rule 25 (arith_expr)

    prio_op  go to state 75


State 29

   27 term: operand •

    $default  reduce using rule 27 (term)


State 30

   23 cond_expr: factor •
   29 operand: factor • unary_op
   31        | factor •

    INCREMENT  shift, and go to state 16
    DECREMENT  shift, and go to state 17

    WHILE        reduce using rule 23 (cond_expr)
    WHILE        [reduce using rule 31 (operand)]
    PLUS         reduce using rule 31 (operand)
    MINUS        reduce using rule 31 (operand)
    TIMES        reduce using rule 31 (operand)
    OVER         reduce using rule 31 (operand)
    PERCENT      reduce using rule 31 (operand)
    RPAREN       reduce using rule 23 (cond_expr)
    RPAREN       [reduce using rule 31 (operand)]
    SEMI         reduce using rule 23 (cond_expr)
    SEMI         [reduce using rule 31 (operand)]
    COLON        reduce using rule 23 (cond_expr)
    COLON        [reduce using rule 31 (operand)]
    RIGHT_SHIFT  reduce using rule 31 (operand)
    LEFT_SHIFT   reduce using rule 31 (operand)
    $default     reduce using rule 23 (cond_expr)

    unary_op  go to state 76


State 31

   28 operand: unary_op • factor

    NUM     shift, and go to state 11
    ID      shift, and go to state 12
    FNUM    shift, and go to state 13
    LPAREN  shift, and go to state 50

    function_inst  go to state 24
    factor         go to state 77


State 32

    5 stmt: if_stmt •

    $default  reduce using rule 5 (stmt)


State 33

    7 stmt: do_stmt •

    $default  reduce using rule 7 (stmt)


State 34

    6 stmt: while_stmt •

    $default  reduce using rule 6 (stmt)


State 35

    8 stmt: for_stmt •

    $default  reduce using rule 8 (stmt)


State 36

    9 stmt: return_stmt •

    $default  reduce using rule 9 (stmt)


State 37

   13 declaration_stmt: type • ID
   14                 | type • ID ASSIGN expr

    ID  shift, and go to state 78


State 38

   30 operand: type_cast • factor

    NUM     shift, and go to state 11
    ID      shift, and go to state 12
    FNUM    shift, and go to state 13
    LPAREN  shift, and go to state 50

    function_inst  go to state 24
    factor         go to state 79


State 39

   54 if_stmt: IF LPAREN • expr RPAREN compound_stmt
   55        | IF LPAREN • expr RPAREN compound_stmt elseif_list
   56        | IF LPAREN • expr RPAREN compound_stmt ELSE compound_stmt
   57        | IF LPAREN • expr RPAREN compound_stmt elseif_list ELSE compound_stmt

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 80
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 40

   61 do_stmt: DO stmt • WHILE expr

    WHILE  shift, and go to state 81


State 41

   11 stmt: compound_stmt •
   60 do_stmt: DO compound_stmt • WHILE expr

    WHILE  shift, and go to state 82

    WHILE  [reduce using rule 11 (stmt)]


State 42

   62 while_stmt: WHILE LPAREN • expr RPAREN compound_stmt
   63           | WHILE LPAREN • expr RPAREN stmt

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 83
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 43

   64 for_stmt: FOR LPAREN • expr SEMI expr SEMI expr RPAREN compound_stmt
   65         | FOR LPAREN • expr SEMI expr SEMI expr RPAREN stmt

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 84
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 44

   66 return_stmt: RETURN expr •

    $default  reduce using rule 66 (return_stmt)


State 45

   16 function_inst: ID LPAREN • function_inst_parameters RPAREN

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst             go to state 24
    function_inst_parameters  go to state 85
    expr                      go to state 86
    cond_expr                 go to state 26
    arith_expr                go to state 27
    term                      go to state 28
    operand                   go to state 29
    factor                    go to state 30
    unary_op                  go to state 31
    type_cast                 go to state 38


State 46

   24 arith_expr: arith_expr • op term
   32 factor: LPAREN arith_expr • RPAREN

    PLUS         shift, and go to state 67
    MINUS        shift, and go to state 68
    RPAREN       shift, and go to state 87
    RIGHT_SHIFT  shift, and go to state 69
    LEFT_SHIFT   shift, and go to state 70

    op  go to state 71


State 47

   29 operand: factor • unary_op
   31        | factor •

    INCREMENT  shift, and go to state 16
    DECREMENT  shift, and go to state 17

    $default  reduce using rule 31 (operand)

    unary_op  go to state 76


State 48

   73 type_cast: LPAREN type • RPAREN

    RPAREN  shift, and go to state 88


State 49

    4 stmts: stmts • stmt SEMI
   15 compound_stmt: LEFT_BRACE stmts • RIGHT_BRACE

    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    RIGHT_BRACE  shift, and go to state 89
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    stmt              go to state 55
    declaration_stmt  go to state 22
    compound_stmt     go to state 23
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    type              go to state 37
    type_cast         go to state 38


State 50

   32 factor: LPAREN • arith_expr RPAREN

    NUM        shift, and go to state 11
    ID         shift, and go to state 12
    FNUM       shift, and go to state 13
    LPAREN     shift, and go to state 14
    INCREMENT  shift, and go to state 16
    DECREMENT  shift, and go to state 17

    function_inst  go to state 24
    arith_expr     go to state 46
    term           go to state 28
    operand        go to state 29
    factor         go to state 47
    unary_op       go to state 31
    type_cast      go to state 38


State 51

   21 cond_expr: cond_expr • cond_op factor
   22          | LOGICAL_NOT cond_expr •

    LOGICAL_AND            shift, and go to state 58
    LOGICAL_OR             shift, and go to state 59
    EQUAL                  shift, and go to state 60
    NOT_EQUAL              shift, and go to state 61
    LESS_THAN              shift, and go to state 62
    GREATER_THAN           shift, and go to state 63
    LESS_THAN_OR_EQUAL     shift, and go to state 64
    GREATER_THAN_OR_EQUAL  shift, and go to state 65

    LOGICAL_AND            [reduce using rule 22 (cond_expr)]
    LOGICAL_OR             [reduce using rule 22 (cond_expr)]
    EQUAL                  [reduce using rule 22 (cond_expr)]
    NOT_EQUAL              [reduce using rule 22 (cond_expr)]
    LESS_THAN              [reduce using rule 22 (cond_expr)]
    GREATER_THAN           [reduce using rule 22 (cond_expr)]
    LESS_THAN_OR_EQUAL     [reduce using rule 22 (cond_expr)]
    GREATER_THAN_OR_EQUAL  [reduce using rule 22 (cond_expr)]
    $default               reduce using rule 22 (cond_expr)

    cond_op  go to state 66


State 52

   23 cond_expr: factor •

    $default  reduce using rule 23 (cond_expr)


State 53

    0 $accept: prog $end •

    $default  accept


State 54

   67 endfile: ENDFILE •

    $default  reduce using rule 67 (endfile)


State 55

    4 stmts: stmts stmt • SEMI

    SEMI  shift, and go to state 90


State 56

    1 prog: stmts endfile •

    $default  reduce using rule 1 (prog)


State 57

    3 stmts: stmt SEMI • stmts

    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    IF           [reduce using rule 2 (stmts)]
    DO           [reduce using rule 2 (stmts)]
    WHILE        [reduce using rule 2 (stmts)]
    FOR          [reduce using rule 2 (stmts)]
    RETURN       [reduce using rule 2 (stmts)]
    INT          [reduce using rule 2 (stmts)]
    FLOAT        [reduce using rule 2 (stmts)]
    DOUBLE       [reduce using rule 2 (stmts)]
    CHAR         [reduce using rule 2 (stmts)]
    VOID         [reduce using rule 2 (stmts)]
    NUM          [reduce using rule 2 (stmts)]
    ID           [reduce using rule 2 (stmts)]
    FNUM         [reduce using rule 2 (stmts)]
    LPAREN       [reduce using rule 2 (stmts)]
    LEFT_BRACE   [reduce using rule 2 (stmts)]
    INCREMENT    [reduce using rule 2 (stmts)]
    DECREMENT    [reduce using rule 2 (stmts)]
    LOGICAL_NOT  [reduce using rule 2 (stmts)]
    $default     reduce using rule 2 (stmts)

    stmts             go to state 91
    stmt              go to state 21
    declaration_stmt  go to state 22
    compound_stmt     go to state 23
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    type              go to state 37
    type_cast         go to state 38


State 58

   50 cond_op: LOGICAL_AND •

    $default  reduce using rule 50 (cond_op)


State 59

   51 cond_op: LOGICAL_OR •

    $default  reduce using rule 51 (cond_op)


State 60

   52 cond_op: EQUAL •

    $default  reduce using rule 52 (cond_op)


State 61

   53 cond_op: NOT_EQUAL •

    $default  reduce using rule 53 (cond_op)


State 62

   49 cond_op: LESS_THAN •

    $default  reduce using rule 49 (cond_op)


State 63

   46 cond_op: GREATER_THAN •

    $default  reduce using rule 46 (cond_op)


State 64

   47 cond_op: LESS_THAN_OR_EQUAL •

    $default  reduce using rule 47 (cond_op)


State 65

   48 cond_op: GREATER_THAN_OR_EQUAL •

    $default  reduce using rule 48 (cond_op)


State 66

   21 cond_expr: cond_expr cond_op • factor

    NUM     shift, and go to state 11
    ID      shift, and go to state 12
    FNUM    shift, and go to state 13
    LPAREN  shift, and go to state 50

    function_inst  go to state 24
    factor         go to state 92


State 67

   37 op: PLUS •

    $default  reduce using rule 37 (op)


State 68

   38 op: MINUS •

    $default  reduce using rule 38 (op)


State 69

   39 op: RIGHT_SHIFT •

    $default  reduce using rule 39 (op)


State 70

   40 op: LEFT_SHIFT •

    $default  reduce using rule 40 (op)


State 71

   24 arith_expr: arith_expr op • term

    NUM        shift, and go to state 11
    ID         shift, and go to state 12
    FNUM       shift, and go to state 13
    LPAREN     shift, and go to state 14
    INCREMENT  shift, and go to state 16
    DECREMENT  shift, and go to state 17

    function_inst  go to state 24
    term           go to state 93
    operand        go to state 29
    factor         go to state 47
    unary_op       go to state 31
    type_cast      go to state 38


State 72

   41 prio_op: TIMES •

    $default  reduce using rule 41 (prio_op)


State 73

   42 prio_op: OVER •

    $default  reduce using rule 42 (prio_op)


State 74

   43 prio_op: PERCENT •

    $default  reduce using rule 43 (prio_op)


State 75

   26 term: term prio_op • operand

    NUM        shift, and go to state 11
    ID         shift, and go to state 12
    FNUM       shift, and go to state 13
    LPAREN     shift, and go to state 14
    INCREMENT  shift, and go to state 16
    DECREMENT  shift, and go to state 17

    function_inst  go to state 24
    operand        go to state 94
    factor         go to state 47
    unary_op       go to state 31
    type_cast      go to state 38


State 76

   29 operand: factor unary_op •

    $default  reduce using rule 29 (operand)


State 77

   28 operand: unary_op factor •

    $default  reduce using rule 28 (operand)


State 78

   13 declaration_stmt: type ID •
   14                 | type ID • ASSIGN expr

    ASSIGN  shift, and go to state 95

    $default  reduce using rule 13 (declaration_stmt)


State 79

   30 operand: type_cast factor •

    $default  reduce using rule 30 (operand)


State 80

   54 if_stmt: IF LPAREN expr • RPAREN compound_stmt
   55        | IF LPAREN expr • RPAREN compound_stmt elseif_list
   56        | IF LPAREN expr • RPAREN compound_stmt ELSE compound_stmt
   57        | IF LPAREN expr • RPAREN compound_stmt elseif_list ELSE compound_stmt

    RPAREN  shift, and go to state 96


State 81

   61 do_stmt: DO stmt WHILE • expr

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 97
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 82

   60 do_stmt: DO compound_stmt WHILE • expr

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 98
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 83

   62 while_stmt: WHILE LPAREN expr • RPAREN compound_stmt
   63           | WHILE LPAREN expr • RPAREN stmt

    RPAREN  shift, and go to state 99


State 84

   64 for_stmt: FOR LPAREN expr • SEMI expr SEMI expr RPAREN compound_stmt
   65         | FOR LPAREN expr • SEMI expr SEMI expr RPAREN stmt

    SEMI  shift, and go to state 100


State 85

   16 function_inst: ID LPAREN function_inst_parameters • RPAREN
   17 function_inst_parameters: function_inst_parameters • COLON expr

    RPAREN  shift, and go to state 101
    COLON   shift, and go to state 102


State 86

   18 function_inst_parameters: expr •

    $default  reduce using rule 18 (function_inst_parameters)


State 87

   32 factor: LPAREN arith_expr RPAREN •

    $default  reduce using rule 32 (factor)


State 88

   73 type_cast: LPAREN type RPAREN •

    $default  reduce using rule 73 (type_cast)


State 89

   15 compound_stmt: LEFT_BRACE stmts RIGHT_BRACE •

    $default  reduce using rule 15 (compound_stmt)


State 90

    4 stmts: stmts stmt SEMI •

    $default  reduce using rule 4 (stmts)


State 91

    3 stmts: stmt SEMI stmts •
    4      | stmts • stmt SEMI

    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    IF           [reduce using rule 3 (stmts)]
    DO           [reduce using rule 3 (stmts)]
    WHILE        [reduce using rule 3 (stmts)]
    FOR          [reduce using rule 3 (stmts)]
    RETURN       [reduce using rule 3 (stmts)]
    INT          [reduce using rule 3 (stmts)]
    FLOAT        [reduce using rule 3 (stmts)]
    DOUBLE       [reduce using rule 3 (stmts)]
    CHAR         [reduce using rule 3 (stmts)]
    VOID         [reduce using rule 3 (stmts)]
    NUM          [reduce using rule 3 (stmts)]
    ID           [reduce using rule 3 (stmts)]
    FNUM         [reduce using rule 3 (stmts)]
    LPAREN       [reduce using rule 3 (stmts)]
    LEFT_BRACE   [reduce using rule 3 (stmts)]
    INCREMENT    [reduce using rule 3 (stmts)]
    DECREMENT    [reduce using rule 3 (stmts)]
    LOGICAL_NOT  [reduce using rule 3 (stmts)]
    $default     reduce using rule 3 (stmts)

    stmt              go to state 55
    declaration_stmt  go to state 22
    compound_stmt     go to state 23
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    type              go to state 37
    type_cast         go to state 38


State 92

   21 cond_expr: cond_expr cond_op factor •

    $default  reduce using rule 21 (cond_expr)


State 93

   24 arith_expr: arith_expr op term •
   26 term: term • prio_op operand

    TIMES    shift, and go to state 72
    OVER     shift, and go to state 73
    PERCENT  shift, and go to state 74

    $default  reduce using rule 24 (arith_expr)

    prio_op  go to state 75


State 94

   26 term: term prio_op operand •

    $default  reduce using rule 26 (term)


State 95

   14 declaration_stmt: type ID ASSIGN • expr

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 103
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 96

   54 if_stmt: IF LPAREN expr RPAREN • compound_stmt
   55        | IF LPAREN expr RPAREN • compound_stmt elseif_list
   56        | IF LPAREN expr RPAREN • compound_stmt ELSE compound_stmt
   57        | IF LPAREN expr RPAREN • compound_stmt elseif_list ELSE compound_stmt

    LEFT_BRACE  shift, and go to state 15

    compound_stmt  go to state 104


State 97

   61 do_stmt: DO stmt WHILE expr •

    $default  reduce using rule 61 (do_stmt)


State 98

   60 do_stmt: DO compound_stmt WHILE expr •

    $default  reduce using rule 60 (do_stmt)


State 99

   62 while_stmt: WHILE LPAREN expr RPAREN • compound_stmt
   63           | WHILE LPAREN expr RPAREN • stmt

    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    stmt              go to state 105
    declaration_stmt  go to state 22
    compound_stmt     go to state 106
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    type              go to state 37
    type_cast         go to state 38


State 100

   64 for_stmt: FOR LPAREN expr SEMI • expr SEMI expr RPAREN compound_stmt
   65         | FOR LPAREN expr SEMI • expr SEMI expr RPAREN stmt

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 107
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 101

   16 function_inst: ID LPAREN function_inst_parameters RPAREN •

    $default  reduce using rule 16 (function_inst)


State 102

   17 function_inst_parameters: function_inst_parameters COLON • expr

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 108
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 103

   14 declaration_stmt: type ID ASSIGN expr •

    $default  reduce using rule 14 (declaration_stmt)


State 104

   54 if_stmt: IF LPAREN expr RPAREN compound_stmt •
   55        | IF LPAREN expr RPAREN compound_stmt • elseif_list
   56        | IF LPAREN expr RPAREN compound_stmt • ELSE compound_stmt
   57        | IF LPAREN expr RPAREN compound_stmt • elseif_list ELSE compound_stmt

    ELSEIF  shift, and go to state 109
    ELSE    shift, and go to state 110

    $default  reduce using rule 54 (if_stmt)

    elseif_list  go to state 111


State 105

   63 while_stmt: WHILE LPAREN expr RPAREN stmt •

    $default  reduce using rule 63 (while_stmt)


State 106

   11 stmt: compound_stmt •
   62 while_stmt: WHILE LPAREN expr RPAREN compound_stmt •

    WHILE     reduce using rule 11 (stmt)
    WHILE     [reduce using rule 62 (while_stmt)]
    SEMI      reduce using rule 11 (stmt)
    SEMI      [reduce using rule 62 (while_stmt)]
    $default  reduce using rule 11 (stmt)


State 107

   64 for_stmt: FOR LPAREN expr SEMI expr • SEMI expr RPAREN compound_stmt
   65         | FOR LPAREN expr SEMI expr • SEMI expr RPAREN stmt

    SEMI  shift, and go to state 112


State 108

   17 function_inst_parameters: function_inst_parameters COLON expr •

    $default  reduce using rule 17 (function_inst_parameters)


State 109

   59 elseif_list: ELSEIF • LPAREN expr RPAREN compound_stmt

    LPAREN  shift, and go to state 113


State 110

   56 if_stmt: IF LPAREN expr RPAREN compound_stmt ELSE • compound_stmt

    LEFT_BRACE  shift, and go to state 15

    compound_stmt  go to state 114


State 111

   55 if_stmt: IF LPAREN expr RPAREN compound_stmt elseif_list •
   57        | IF LPAREN expr RPAREN compound_stmt elseif_list • ELSE compound_stmt
   58 elseif_list: elseif_list • ELSEIF LPAREN expr RPAREN compound_stmt

    ELSEIF  shift, and go to state 115
    ELSE    shift, and go to state 116

    $default  reduce using rule 55 (if_stmt)


State 112

   64 for_stmt: FOR LPAREN expr SEMI expr SEMI • expr RPAREN compound_stmt
   65         | FOR LPAREN expr SEMI expr SEMI • expr RPAREN stmt

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 117
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 113

   59 elseif_list: ELSEIF LPAREN • expr RPAREN compound_stmt

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 118
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 114

   56 if_stmt: IF LPAREN expr RPAREN compound_stmt ELSE compound_stmt •

    $default  reduce using rule 56 (if_stmt)


State 115

   58 elseif_list: elseif_list ELSEIF • LPAREN expr RPAREN compound_stmt

    LPAREN  shift, and go to state 119


State 116

   57 if_stmt: IF LPAREN expr RPAREN compound_stmt elseif_list ELSE • compound_stmt

    LEFT_BRACE  shift, and go to state 15

    compound_stmt  go to state 120


State 117

   64 for_stmt: FOR LPAREN expr SEMI expr SEMI expr • RPAREN compound_stmt
   65         | FOR LPAREN expr SEMI expr SEMI expr • RPAREN stmt

    RPAREN  shift, and go to state 121


State 118

   59 elseif_list: ELSEIF LPAREN expr • RPAREN compound_stmt

    RPAREN  shift, and go to state 122


State 119

   58 elseif_list: elseif_list ELSEIF LPAREN • expr RPAREN compound_stmt

    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    function_inst  go to state 24
    expr           go to state 123
    cond_expr      go to state 26
    arith_expr     go to state 27
    term           go to state 28
    operand        go to state 29
    factor         go to state 30
    unary_op       go to state 31
    type_cast      go to state 38


State 120

   57 if_stmt: IF LPAREN expr RPAREN compound_stmt elseif_list ELSE compound_stmt •

    $default  reduce using rule 57 (if_stmt)


State 121

   64 for_stmt: FOR LPAREN expr SEMI expr SEMI expr RPAREN • compound_stmt
   65         | FOR LPAREN expr SEMI expr SEMI expr RPAREN • stmt

    IF           shift, and go to state 1
    DO           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    RETURN       shift, and go to state 5
    INT          shift, and go to state 6
    FLOAT        shift, and go to state 7
    DOUBLE       shift, and go to state 8
    CHAR         shift, and go to state 9
    VOID         shift, and go to state 10
    NUM          shift, and go to state 11
    ID           shift, and go to state 12
    FNUM         shift, and go to state 13
    LPAREN       shift, and go to state 14
    LEFT_BRACE   shift, and go to state 15
    INCREMENT    shift, and go to state 16
    DECREMENT    shift, and go to state 17
    LOGICAL_NOT  shift, and go to state 18

    stmt              go to state 124
    declaration_stmt  go to state 22
    compound_stmt     go to state 125
    function_inst     go to state 24
    expr              go to state 25
    cond_expr         go to state 26
    arith_expr        go to state 27
    term              go to state 28
    operand           go to state 29
    factor            go to state 30
    unary_op          go to state 31
    if_stmt           go to state 32
    do_stmt           go to state 33
    while_stmt        go to state 34
    for_stmt          go to state 35
    return_stmt       go to state 36
    type              go to state 37
    type_cast         go to state 38


State 122

   59 elseif_list: ELSEIF LPAREN expr RPAREN • compound_stmt

    LEFT_BRACE  shift, and go to state 15

    compound_stmt  go to state 126


State 123

   58 elseif_list: elseif_list ELSEIF LPAREN expr • RPAREN compound_stmt

    RPAREN  shift, and go to state 127


State 124

   65 for_stmt: FOR LPAREN expr SEMI expr SEMI expr RPAREN stmt •

    $default  reduce using rule 65 (for_stmt)


State 125

   11 stmt: compound_stmt •
   64 for_stmt: FOR LPAREN expr SEMI expr SEMI expr RPAREN compound_stmt •

    WHILE     reduce using rule 11 (stmt)
    WHILE     [reduce using rule 64 (for_stmt)]
    SEMI      reduce using rule 11 (stmt)
    SEMI      [reduce using rule 64 (for_stmt)]
    $default  reduce using rule 11 (stmt)


State 126

   59 elseif_list: ELSEIF LPAREN expr RPAREN compound_stmt •

    $default  reduce using rule 59 (elseif_list)


State 127

   58 elseif_list: elseif_list ELSEIF LPAREN expr RPAREN • compound_stmt

    LEFT_BRACE  shift, and go to state 15

    compound_stmt  go to state 128


State 128

   58 elseif_list: elseif_list ELSEIF LPAREN expr RPAREN compound_stmt •

    $default  reduce using rule 58 (elseif_list)
